name: ci

on:
  push:
    branches: [main, '**']
  pull_request:

jobs:
  node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22', cache: 'pnpm' }
      - run: corepack enable
      - run: pnpm -v
      - run: pnpm -w install --frozen-lockfile
      - run: pnpm -r lint
      - run: pnpm -r build
      - run: pnpm -r test
      - run: pnpm dlx license-checker-rseidelsohn --summary
      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Generate SBOM
        run: |
          mkdir -p .sbom
          syft dir:. -o syft-json > .sbom/project-sbom.json || { echo "SBOM generation failed"; exit 1; }
          if [ ! -s .sbom/project-sbom.json ]; then
            echo "SBOM file is empty or not generated"; exit 1
          fi
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: project-sbom
          path: .sbom/project-sbom.json
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: python -m pip install -U pip uv
      - run: uv venv
      - run: uv pip install -r requirements-dev.txt || true
      - run: pytest agents/glitch/tests core/tests -q
      - run: |
          cd services/core-api
          alembic upgrade head --sql >/dev/null
          heads=$(alembic heads | wc -l)
          if [ "$heads" -ne 1 ]; then
            echo 'multiple migration heads'
            exit 1
          fi
          alembic current

  core-api-smoke-test:
    name: core-api-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build core-api image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/core-api/Dockerfile -t nova-core-api-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-core-api-test -p 8000:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-core-api-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-core-api-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-core-api-test | grep "NovaOS identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-core-api-test || true
          docker rm nova-core-api-test || true

  glitch-smoke-test:
    name: glitch-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build glitch image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/glitch/Dockerfile -t nova-glitch-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-glitch-test -p 8800:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-glitch-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8800/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-glitch-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-glitch-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-glitch-test || true
          docker rm nova-glitch-test || true

  lyra-smoke-test:
    name: lyra-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build lyra image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/lyra/Dockerfile -t nova-lyra-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-lyra-test -p 8900:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-lyra-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8900/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-lyra-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-lyra-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-lyra-test || true
          docker rm nova-lyra-test || true

  velora-smoke-test:
    name: velora-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build velora image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/velora/Dockerfile -t nova-velora-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-velora-test -p 9000:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-velora-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-velora-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-velora-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-velora-test || true
          docker rm nova-velora-test || true

  nova-orchestrator-smoke-test:
    name: nova-orchestrator-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build nova-orchestrator image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/nova-orchestrator/Dockerfile -t nova-orchestrator-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-orchestrator-test -p 9400:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            -e APP_MODULE=app.main:app \
            nova-orchestrator-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9400/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-orchestrator-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-orchestrator-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-orchestrator-test || true
          docker rm nova-orchestrator-test || true

  riven-smoke-test:
    name: riven-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build riven image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/riven/Dockerfile -t nova-riven-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-riven-test -p 9100:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-riven-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9100/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-riven-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-riven-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-riven-test || true
          docker rm nova-riven-test || true

  echo-smoke-test:
    name: echo-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build echo image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/echo/Dockerfile -t nova-echo-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-echo-test -p 9200:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-echo-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9200/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-echo-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-echo-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-echo-test || true
          docker rm nova-echo-test || true

  audita-smoke-test:
    name: audita-smoke-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check required files
        id: gate
        shell: bash
        run: |
          missing=0
          for f in env/config.json secrets/dev_jwt_private.pem secrets/dev_jwt_public.pem; do
            if [ ! -f "$f" ]; then
              echo "Missing $f"
              missing=1
            fi
          done
          if [ "$missing" -eq 0 ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build audita image (prod)
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker build -f services/audita/Dockerfile -t nova-audita-prod:ci .

      - name: Run container
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker run -d --name nova-audita-test -p 9300:8000 \
            -v ${{ github.workspace }}/env/config.json:/app/env/config.json:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_private.pem:/run/secrets/dev_jwt_private:ro \
            -v ${{ github.workspace }}/secrets/dev_jwt_public.pem:/run/secrets/dev_jwt_public:ro \
            -e JWT_PRIVATE_KEY_PATH=/run/secrets/dev_jwt_private \
            -e JWT_PUBLIC_KEY_PATH=/run/secrets/dev_jwt_public \
            -e AGENT_SHARED_TOKEN=devtoken \
            -e HOST=0.0.0.0 \
            -e PORT=8000 \
            nova-audita-prod:ci

      - name: Wait for service to be ready
        if: steps.gate.outputs.ready == 'true'
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9300/internal/healthz || true)
            if [ "$code" = "200" ]; then
              echo "Service healthy"
              exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs nova-audita-test || true
          exit 1

      - name: Assert identity log present
        if: steps.gate.outputs.ready == 'true'
        run: |
          docker logs nova-audita-test | grep "\[NovaOS\] identity loaded from /app/env/config.json"

      - name: Stop and remove container
        if: always()
        run: |
          docker stop nova-audita-test || true
          docker rm nova-audita-test || true
